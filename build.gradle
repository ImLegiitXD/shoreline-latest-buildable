plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
    id 'com.gradleup.shadow' version '9.0.0-beta4'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

buildConfig {
    buildConfigField(String, "HASH", "${execute("git rev-parse --short HEAD")}")
    buildConfigField(String, "VERSION", project.mod_version)
    buildConfigField(String, "BUILD_NUMBER", project.build_number)
    buildConfigField(String, "BUILD_IDENTIFIER", project.build_identifier)
    buildConfigField(String, "BUILD_TIME", "${new Date(System.currentTimeMillis()).format("MM/dd/yyyy HH:mm")}")

    packageName "net.shoreline.client"
    useJavaOutput()
    generateAtSync = true
    documentation.set("Generated by BuildConfig plugin")
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

loom {
    accessWidenerPath = file("src/main/resources/shoreline.accesswidener")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://impactdevelopment.github.io/maven/" }
    maven { url = "https://maven.meteordev.org/releases" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "cabaletta:baritone-api:${baritone_api_version}"

    // Discord Implementation $$$
    implementation(shadow("meteordevelopment:discord-ipc:1.1"))
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 21

    // Make this run before the compileJava task
    dependsOn generateBuildConfig
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev")
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('buildClientOnly') {
    doFirst {
        tasks.remapLoader.enabled = false
    }
    finalizedBy 'build'
}

// tasks.register('clientJar', Jar) {
//     dependsOn remapJar
//     outputs.upToDateWhen { false }
//
//     from(zipTree(tasks.remapJar.archivePath))
//
//     include 'net/shoreline/client/**'
//     include 'net/shoreline/eventbus/**'
//     include 'assets/**'
//     include 'shoreline-refmap.json'
//     include 'shoreline.accesswidener'
//
//     archiveBaseName = "client-raw"
//     archiveClassifier = ""
//     archiveVersion = ""
// }

def execute(String cmd) {
    try {
        final def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}